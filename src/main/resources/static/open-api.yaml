openapi: 3.0.4
info:
  title: Library-App API - Books & Authors
  description: |-
    Library-App API provides endpoints to manage books and authors.
    Supports standard CRUD operations and is built with OpenAPI 3.0 specification.
  version: 1.0.12
servers:
  - url: http://localhost:8080

security:
  - basicAuth: []

tags:
  - name: book
    description: CRUD operations for books
  - name: author
    description: CRUD operations for authors

paths:
  /book/{bookId}:
    get:
      tags:
        - book
      summary: Find book by ID.
      operationId: getBookById
      parameters:
        - name: bookId
          in: path
          description: ID of book to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '400':
          description: Invalid ID supplied
        '404':
          description: Book not found
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

    delete:
      tags:
        - book
      summary: Delete a book by ID
      operationId: deleteBook
      parameters:
        - name: bookId
          in: path
          description: ID of book to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Book deleted successfully
        '400':
          description: Invalid ID supplied
        '404':
          description: Book not found
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /books:
    get:
      tags:
        - book
      summary: Get all books with pagination
      operationId: getAllBooks
      parameters:
        - name: page
          in: query
          description: Page number
          required: true
          schema:
            type: integer
            example: 0
        - name: size
          in: query
          description: Number of items per page
          required: true
          schema:
            type: integer
            example: 10
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageBook'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /book:
    post:
      tags:
        - book
      summary: Add a new book to the store.
      operationId: addBook
      requestBody:
        description: Create a new book in the store.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Book'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '400':
          description: Invalid input
        '422':
          description: Validation exception
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

    put:
      tags:
        - book
      summary: Update an existing book.
      operationId: updateBook
      requestBody:
        description: Update an existing book in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Book'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '400':
          description: Invalid ID supplied
        '404':
          description: Book not found
        '422':
          description: Validation exception
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /author/{authorId}:
    get:
      tags:
        - author
      summary: Find author by ID.
      operationId: getAuthorById
      parameters:
        - name: authorId
          in: path
          description: ID of author to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Author'
        '400':
          description: Invalid ID supplied
        '404':
          description: Author not found
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

    delete:
      tags:
        - author
      summary: Delete an author by ID
      operationId: deleteAuthor
      parameters:
        - name: authorId
          in: path
          description: ID of author to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Author deleted successfully
        '400':
          description: Invalid ID supplied
        '404':
          description: Author not found
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /authors:
    get:
      tags:
        - author
      summary: Get all authors with pagination
      operationId: getAllAuthors
      parameters:
        - name: page
          in: query
          description: Page number
          required: true
          schema:
            type: integer
            example: 0
        - name: size
          in: query
          description: Number of items per page
          required: true
          schema:
            type: integer
            example: 10
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageAuthor'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /author:
    post:
      tags:
        - author
      summary: Add a new author to the store.
      operationId: addAuthor
      requestBody:
        description: Create a new author in the store.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Author'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Author'
        '400':
          description: Invalid input
        '422':
          description: Validation exception
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

    put:
      tags:
        - author
      summary: Update an existing author.
      operationId: updateAuthor
      requestBody:
        description: Update an existing author in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Author'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Author'
        '400':
          description: Invalid ID supplied
        '404':
          description: Author not found
        '422':
          description: Validation exception
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic

  schemas:
    Book:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        isAvailable:
          type: boolean
        author:
          $ref: '#/components/schemas/Author'

    Author:
      type: object
      properties:
        id:
          type: integer
          format: int64
        firstName:
          type: string
        lastName:
          type: string

    Error:
      type: object
      properties:
        code:
          type: integer
        message:
          type: string

    PageBook:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/Book'
        totalElements:
          type: integer
        totalPages:
          type: integer
        page:
          type: integer
        size:
          type: integer

    PageAuthor:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/Author'
        totalElements:
          type: integer
        totalPages:
          type: integer
        page:
          type: integer
        size:
          type: integer
